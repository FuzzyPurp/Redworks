-- BundleWorks is a program to tell the computer which redpower 
-- wire to activate / deactivate.
-- colors such as: red,cyan,blue,lightgray,yellow etc. all 16 colors
-- reset: turns all the wires off.
-- all: turns all the wires on.
-- quit: quits the program.
-- Important: Bundleworks assumes you have the regular bundled cable, 
-- connected to the back of the computer for output. 

function light(color)
if color=="red" then
return colors.red,1
end
if color=="white" then
return colors.white,2
end
if color=="blue" then
return colors.blue,3
end
if color=="green" then
return colors.green,4
end
if color=="pink" then
return colors.pink,5
end
if color=="orange" then
return colors.orange,6
end
if color=="magenta" then
return colors.magenta,7
end
if color=="lightblue" then
return 8,8
end
if color=="yellow" then
return colors.yellow,9
end
if color=="lime" then
return colors.lime,10
end
if color=="gray" then
return colors.gray,11
end
if color=="lightgray" then
return 256,12
end
if color=="cyan" then
return colors.cyan,13
end
if color=="purple" then
return colors.purple,14
end
if color=="brown" then
return colors.brown,15
end
if color=="black" then
return colors.black,16
end
if color=="quit" then
shell.run("clear")
term.setCursorPos(1,3)
textutils.slowPrint ("Thank you for using RedWorks BundleWorks!")
sleep(1)
os.shutdown()
end
if color=="reset" then
return (redstone.getBundledOutput("back")*(-1))
end
if color=="all" then
return (65535)
end
return 0
end

l={}
for i=1, 16 do
l[i]=0
end

term.clear()
term.setCursorPos(1,1)
while true do
write("Please define a Color ")
a=read()
num,place=light(a,l)

if num==redstone.getBundledOutput("back")*(-1)  then
redstone.setBundledOutput("back", 0)
term.clear()
term.setCursorPos(1,1)
print("All the colors are now off")
for i=1, 16 do
l[i]=0
end
else
if num==65535 then
redstone.setBundledOutput("back", 65535)
term.clear()
term.setCursorPos(1,1)
print("All the colors are now on")
for i=1, 16 do
l[i]=1
end
else

if num~=0 then
if l[place]==0 then
l[place]=1
else
l[place]=0
end
if l[place]==0 then
redstone.setBundledOutput("back", redstone.getBundledOutput("back")-num)
term.clear()
term.setCursorPos(1,1)
print(a.." is now off")
else
redstone.setBundledOutput("back", redstone.getBundledOutput("back")+num)
term.clear()
term.setCursorPos(1,1)
print(a.." is now on")
end
else
write("That is not a valid Color ")
print(newline)
end
end
end
end
