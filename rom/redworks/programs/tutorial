-- BaseLine Variables
CurrentChapter = 1
CurrentSection = 1
ChapterTitles = {
 "How to Create a Program",
 "How to Display and clear Text", 
 "How to Use Variables"
}
Chapter = {
	             [1] = {
				 "Key Points in this Chapter:\n1. Learning how to create a program.\n2. Learning how to save that program.\n3. Learning how to run that program.",
                 "1.1 - Learning how to create a program.\n\nOk so first things first right? We gotta learn how to create our first program. Creating a program is very simple in CC.\n\nedit programname\n\nedit means we want to create or edit program, and programname is the name of the program we wish to edit or create.",
                 "1.2 - Learning how to save that program.\n\nSo now your inside the editing feature of CC and you can move around almost like a notepad. We want to press the [Control] key which will bring up a menu at the bottom of your screen. Pressing the [Left] and [Right] arrow keys will change your selection in this menu. [SAVE] will save the program. [QUIT] will quit editing the program. By pressing [ENTER] we can choose our selection.",
                 "1.3 - Learning how to run that program.\n\nWe've created our little program, but how do we run it? Well thats simple. We type the program name into our terminal and press [ENTER], but remember all things in LUA are case-sensitive. Your program named \"Hello\" is not the same as your program named \"hello\".",
                 "1.4 - Practice What We've Learned!\n\nYou'll see a new option at the bottom of your screen now. You can press [SPACE] to continue onward to the next chapter, you can also press [ENTER] to run this chapters simulation.\nDon't worry, you won't hurt my feelings by not practicing.",
                 "SIM" 				 
				 },
				 [2] = {
				 "Key Points in this Chapter:\n1. How to use print\n2. How to use write\n3. How to clear the screen.\n4. How to use the cursor position.\n5. How to clear a specific line.",
				 "2.1 - How to use print.\n\nTo show text to the user is a simple task. We do so by the following.\n\nprint (\"Hello User\")\n\nprint means to display the text to the user, and Hello User is the text we wish to display.",
				 "2.2 - How to use write.\n\nWhen you print text, the program automatically adds a linebreak after your print command, sometimes you may not wish to do this.\n\nwrite (\"Hello\")\nprint (\"User\")\n\nThese two lines would make the exact same appearance as the print line we made previously. The reason is because the write command does not generate a linebreak and we can use this to keep our current position and continue writing on the same line.",
				 "2.3 - How to clear the screen.\nQuite often you'll want to clear the screen automatically in your program.\n\nterm.clear()\n\nUsing this line we can clear the screen for our user to remove anything we don't want cluttering up the screen.",
				 "2.4 - How to use the cursor position.\nThe cursor position is a very powerful thing. For example, when you clear the screen, the cursor still stays on it's previous line. Meaning that after you clear the screen, your next print statement very well may appear at the bottom of the screen.",
				 "2.4 - How to use the cursor position.\nTo remedy this problem we've been given the command.\n\nterm.setCursorPos(1,1)\n\nThe first 1 in our statment is the horizontal position and the second 1 on our statement is the vertical posistion.",
				 "2.4 - How to use the cursor position.\nBy using the term.setCursorPos(1,1) directly after a term.clear(), we can make sure that the next text we show the user appears at the top of his screen.\n\nRemember, lua is case sensitive. term.setcursorpos(1,1) is not right.",
				 "2.5 - How to clear a specific line.\nBy using the term.setCursorPos we can create some pretty nifty tricks, like reprinting over lines already on the screen, or even clearing a certain line and printing something new.",
				 "2.5 - How to clear a specific line.\nterm.setCursorPos(1,1)\nprint (\"You won't see this\")\nterm.setCursorPos(1,1)\nterm.clearLine()\nprint (\"Hello User\")\n\nWe used the term.clearLine() to remove the line at 1,1 and then we printed a new line where the old line used to be.",
                 "2.6 - Practice What We've Learned!\n\nYou'll see a new option at the bottom of your screen now. You can press [SPACE] to continue onward to the next chapter, you can also press [ENTER] to run this chapters simulation.\nDon't worry, you won't hurt my feelings by not practicing.",
				 "SIM"
				 }
				 
		   
}

function mainmenu()
while true do
term.clear()
term.setCursorPos(1,1)
print "--------------------------------------"
print "| ComputerCraft Interactive Tutorial |"
print "|            By: Casper7526          |"
print "--------------------------------------"
print "|                                    |"
print "| 1. Start                           |"
print "| 2. Choose Chapter                  |"
print "| 3. Exit                            |"
print "|                                    |"
print "--------------------------------------"
event, param1, param2, param3 = os.pullEvent()
if event == "char" and param1 == "3" then break end
if event == "char" and param1 == "2" then ChooseChapter() end
end
end

function ChooseChapter()
while true do
term.clear()
term.setCursorPos(1,1)
print "--------------- Chapter Index ---------------"
print "---------------------------------------------"
print ""
local i = 1
	while true do
	if ChapterTitles[i] == nil then break end
	print (i..". "..ChapterTitles[i])
	i = i + 1
	end
print ""
print "q. Back"
print "---------------------------------------------"
write "Choice - "
choice = io.read()
if string.lower(choice) == "q" then break end
if ChapterTitles[tonumber(choice)] == nil then print "Thats not a valid chapter." sleep(1) else
LoadChapter(tonumber(choice)) break end 
end
end

function LoadChapter(chapter)
while true do
term.clear()
term.setCursorPos(1,1)
print ("Chapter "..chapter.." - "..ChapterTitles[chapter])
print ("---------------------------------------------")
print (Chapter[chapter][CurrentSection])
print ""
print "Press [Space] To Continue"
print "Press q to exit and b for back."
if Chapter[chapter][CurrentSection + 1] == "SIM" then print "Press [Enter] To Run Simulation" end
event, param1, param2, param3 = os.pullEvent()
    if event == "key" and param1 == 28 and Chapter[chapter][CurrentSection + 1] == "SIM" then Sim(chapter) EndSim(chapter) chapter = chapter + 1 CurrentSection = 1 end
	if event == "char" and param1 == "q" then CurrentSection = 1 break end
	if event == "char" and param1 == "b" then 
	CurrentSection = CurrentSection - 1
	if CurrentSection == 0 then CurrentSection = 1 end
	end
	if event == "char" and param1 == " " then 
	if Chapter[chapter][CurrentSection + 1] == "SIM" then chapter = chapter + 1 CurrentSection = 1 else CurrentSection = CurrentSection + 1 end
	end
end
end

function EndSim(chapter)
while true do
term.clear()
term.setCursorPos(1,1)
print "Great work back there!"
print ""
print "Press [ENTER] to move on to the next chapter"
event, param1, param2 = os.pullEvent()
if event == "key" and param1 == 28 then break end
end
end

function pressany()
term.setCursorPos(1,18)
print "Press Any Key To Continue"
event = os.pullEvent()
end

function Sim(chapter)
stage = 1
while true do
term.clear()
term.setCursorPos(1,1)
	if chapter == 1 then
    print "Your Goals:"
    print ""
    print "* Create a program named hello."
    print "* Type anything you wish inside that program."
   	print "* Save and Exit the program."
	print "* Run the program."
	print ""
	print "quit   will exit the sim early."
	write (">") input = io.read()
	if input == "quit" then break end
	    --------------------------------
		if stage == 1 then
			if input == "edit hello" then
			shell.run("edit", "tmptut")
			print "Great Job, now let's run our program!"
			sleep(2)
			stage = 2
			else
			print "Remember, lua is case sensitive."
            print "Try"
            print "edit hello"
            sleep(2)			
			end
		elseif stage == 2 then
		    if input == "hello" then shell.run("rm", "tmptut") break
			else
			print "Remember, lua is case sensitive."
            print "Try"
            print "hello"
            sleep(2)			
			end
		end
	end

    if chapter == 2 then
	print "Your Goals:"
    print ""
    print "* Create a program named hello."
	print "* Clear the Screen"
	print "* Set the Cursor Pos to 1,1"
	print "* Print \"Hello Loser\" on line 1 of the screen."
	print "* Print \"Welcome\" on line 2 of the screen."
	print "* Clear the 1st line."
    print "* Print \"Hello User\" on line 1 of the screen."
	print "* Run your program!"
	print ""
	print "You can type \"example\" at anytime to see the correct syntax."
	print "quit   will exit the sim early."
	print ""
	write (">") input = io.read()
	    if input == "quit" then break end
	    if input == "edit hello" then shell.run("edit", "tmptut") end
		if input == "hello" then shell.run("tmptut") pressany() 
		term.clear()
		term.setCursorPos(1,1)
		print "Did you program work as you expected?"
		print ""
		print "Press [ENTER] to end the simulation."
		print "Press Any Other Key to go back and work on your program."
		event, param1, param2 = os.pullEvent()
        if event == "key" and param1 == 28 then break end
        end
		if string.lower(input) == "example" then
		term.clear()
		term.setCursorPos(1,1)
		print ("term.clear()")
		print ("term.setCursorPos(1,1)")
		print ("print (\"Hello Loser\"")
		print ("print (\"Welcome\"")
		print ("term.setCursorPos(1,1)")
		print ("term.clearLine()")
		print ("print (\"Hello User\")")
		pressany()
		end
	end

end
	
end


mainmenu()

print "You don't need to thank me."
print "Thank yourself for learning!"